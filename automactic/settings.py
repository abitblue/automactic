"""
Django settings for automactic project.

Generated by 'django-admin startproject' using Django 3.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os

import logging.config
import logging.handlers
from django.utils.log import DEFAULT_LOGGING


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

assert os.environ.get('CLEARPASS_HOST') is not None, 'Undefined: CLEARPASS_HOST'
assert os.environ.get('CLEARPASS_CLIENT_ID') is not None, 'Undefined: CLEARPASS_CLIENT_ID'
assert os.environ.get('CLEARPASS_CLIENT_SECRET') is not None, 'Undefined: CLEARPASS_CLIENT_SECRET'

# SECURITY WARNING: keep the secret key used in production secret!
assert os.environ.get('AMAC_SECRET_KEY') is not None, 'Environment variable "AMAC_SECRET_KEY" not defined'
SECRET_KEY = os.environ.get('AMAC_SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = (os.environ.get('AMAC_DEBUG', '') == 'True')
if DEBUG:
    print('\033[91m' + 'DEBUG MODE ENABLED' + '\033[0m')

_ALLOWED_HOSTS = os.environ.get("AMAC_ALLOWED_HOSTS", "").split(",")
ALLOWED_HOSTS = [] if not any(_ALLOWED_HOSTS) else _ALLOWED_HOSTS


# Application definition

INSTALLED_APPS = [
    'admin.apps.CustomAdminConfig',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'login.apps.LoginConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'automactic.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'automactic.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'dev': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    },
    'prod': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('AMAC_PG_DBNAME'),
        'USER': os.environ.get('AMAC_PG_USER'),
        'PASSWORD': os.environ.get('AMAC_PG_PASS'),
        'HOST': os.environ.get('AMAC_PG_HOST'),
        'PORT:': os.environ.get('AMAC_PG_PORT'),
    },
}

DATABASES['default'] = DATABASES['dev' if DEBUG else 'prod']


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
    'admin.auth.PlainTextPassword',
]

AUTH_PASSWORD_VALIDATORS = [
    # {
    #     'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    # },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    # },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    # },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

FIXTURE_DIRS = [BASE_DIR / 'fixtures']

AUTH_USER_MODEL = 'login.User'

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = BASE_DIR / "static"

CSRF_COOKIE_HTTPONLY = True
SESSION_COOKIE_HTTPONLY = True
CSRF_COOKIE_SAMESITE = None
SESSION_COOKIE_SAMESITE = None

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Email
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = os.environ.get('SMTP_HOST')
EMAIL_PORT = 465
EMAIL_HOST_USER = os.environ.get('SMTP_USER')
EMAIL_HOST_PASSWORD = os.environ.get('SMTP_PASS')
EMAIL_USE_SSL = True
DEFAULT_FROM_EMAIL = os.environ.get('SMTP_USER')

_EMAIL_RECIPIENTS = os.environ.get("EMAIL_RECIPIENTS", "").split(",")
EMAIL_RECIPIENTS = [] if not any(_EMAIL_RECIPIENTS) else _EMAIL_RECIPIENTS

# Logging

# Disable Django's logging setup
LOGGING_CONFIG = None


logging.config.dictConfig({
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            'format': '%(asctime)-15s | %(name)-26s | %(levelname)-8s {%(filename)s:%(lineno)d} : %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
        'standard_nodate': {
            'format': '%(asctime)-8s | %(process)-6s | %(name)-26s | %(levelname)-8s {%(filename)s:%(lineno)d} : %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        }
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'formatter': 'standard',
            'class': 'logging.StreamHandler',
            'stream': 'ext://sys.stdout',
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'formatter': 'standard_nodate',
            'filename': 'logs/django.log',
            'when': 'midnight',
            'interval': 1,
            'backupCount': 30,
        },
        'null': {
            'level': 'DEBUG',
            'class': 'logging.NullHandler',
            'formatter': 'standard_nodate',
        }
    },
    'loggers': {
        'django.utils.autoreload': {
            'level': 'DEBUG',
            'handlers': ['null'],
            'propagate': False
        },
        '': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': False
        },
    }
})
